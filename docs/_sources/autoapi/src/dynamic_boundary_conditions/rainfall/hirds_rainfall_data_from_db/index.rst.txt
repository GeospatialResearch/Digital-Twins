:py:mod:`src.dynamic_boundary_conditions.rainfall.hirds_rainfall_data_from_db`
==============================================================================

.. py:module:: src.dynamic_boundary_conditions.rainfall.hirds_rainfall_data_from_db

.. autoapi-nested-parse::

   Retrieve all rainfall data for sites within the catchment area from the database.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   src.dynamic_boundary_conditions.rainfall.hirds_rainfall_data_from_db.filter_for_duration
   src.dynamic_boundary_conditions.rainfall.hirds_rainfall_data_from_db.get_one_site_rainfall_data
   src.dynamic_boundary_conditions.rainfall.hirds_rainfall_data_from_db.rainfall_data_from_db



Attributes
~~~~~~~~~~

.. autoapisummary::

   src.dynamic_boundary_conditions.rainfall.hirds_rainfall_data_from_db.log


.. py:data:: log

   

.. py:function:: filter_for_duration(rain_data: pandas.DataFrame, duration: str) -> pandas.DataFrame

   Filter the HIRDS rainfall data for a requested duration.

   :param rain_data: HIRDS rainfall data in Pandas DataFrame format.
   :type rain_data: pd.DataFrame
   :param duration: Storm duration. Valid options are: '10m', '20m', '30m', '1h', '2h', '6h', '12h', '24h', '48h', '72h',
                    '96h', '120h', or 'all'.
   :type duration: str

   :returns: Filtered rainfall data for the requested duration.
   :rtype: pd.DataFrame


.. py:function:: get_one_site_rainfall_data(engine: sqlalchemy.engine.Engine, site_id: str, rcp: Optional[float], time_period: Optional[str], ari: float, duration: str, idf: bool) -> pandas.DataFrame

   Retrieve rainfall data from the database for the requested site based on the user-requested scenario.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param site_id: HIRDS rainfall site ID.
   :type site_id: str
   :param rcp: Representative Concentration Pathway (RCP) value. Valid options are 2.6, 4.5, 6.0, 8.5, or None
               for historical data.
   :type rcp: Optional[float]
   :param time_period: Future time period. Valid options are "2031-2050", "2081-2100", or None for historical data.
   :type time_period: Optional[str]
   :param ari: Average Recurrence Interval (ARI) value. Valid options are 1.58, 2, 5, 10, 20, 30, 40, 50, 60, 80, 100, or 250.
   :type ari: float
   :param duration: Storm duration. Valid options are: '10m', '20m', '30m', '1h', '2h', '6h', '12h', '24h', '48h', '72h',
                    '96h', '120h', or 'all'.
   :type duration: str
   :param idf: Set to False for rainfall depth data, and True for rainfall intensity data.
   :type idf: bool

   :returns: Rainfall data for the requested site based on the user-requested scenario.
   :rtype: pd.DataFrame

   :raises ValueError: If rcp and time_period arguments are inconsistent.


.. py:function:: rainfall_data_from_db(engine: sqlalchemy.engine.Engine, sites_in_catchment: geopandas.GeoDataFrame, rcp: Optional[float], time_period: Optional[str], ari: float, idf: bool = False, duration: str = 'all') -> pandas.DataFrame

   Retrieve rainfall data from the database for sites within the catchment area based on the user-requested scenario.

   :param engine: The engine used to connect to the database.
   :type engine: Engine
   :param sites_in_catchment: Rainfall sites coverage areas (Thiessen polygons) that intersect or are within the catchment area.
   :type sites_in_catchment: gpd.GeoDataFrame
   :param rcp: Representative Concentration Pathway (RCP) value. Valid options are 2.6, 4.5, 6.0, 8.5, or None
               for historical data.
   :type rcp: Optional[float]
   :param time_period: Future time period. Valid options are "2031-2050", "2081-2100", or None for historical data.
   :type time_period: Optional[str]
   :param ari: Average Recurrence Interval (ARI) value. Valid options are 1.58, 2, 5, 10, 20, 30, 40, 50, 60, 80, 100, or 250.
   :type ari: float
   :param idf: Set to False for rainfall depth data, and True for rainfall intensity data.
   :type idf: bool = False
   :param duration: Storm duration. Valid options are: '10m', '20m', '30m', '1h', '2h', '6h', '12h', '24h', '48h', '72h',
                    '96h', '120h', or 'all'. Default is 'all'.
   :type duration: str = "all"

   :returns: A DataFrame containing the rainfall data for sites within the catchment area based on the
             user-requested scenario.
   :rtype: pd.DataFrame


